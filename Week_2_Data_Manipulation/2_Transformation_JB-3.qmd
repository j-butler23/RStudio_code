---
title: "2 Transformation"
author: "Jack Butler"
date: 
format: pdf
editor: visual
---

# 3.2.5 Exercises

```{r}
library(tidyverse)
library(nycflights13)
```

## Filter

1.  Find all flights that

-   Had an arrival delay of two or more hours

```{r}
filter(flights, arr_delay >= 120)
```

-   Flew to Houston (IAH or HOU)

```{r}
filter(flights, dest == "HOU" | dest == "IAH")
```

-   Were operated by United, American, or Delta (hint: run `View(airlines)` to see the table)

```{r}
filter(flights, carrier %in% c("UA", "AA", "DL"))
```

-   Departed in summer (July, August, and September)

```{r}
filter(flights, month %in% c(7, 8, 9))
```

-   Arrived more than two hours late, but didn’t leave late

```{r}
filter(flights, arr_delay > 120 & dep_delay <= 0)
```

-   Were delayed by at least an hour, but made up over 30 minutes in flight

```{r}
filter(flights, dep_delay > 60 & dep_delay - arr_delay > 30)
```

-   Departed between midnight and 6am (inclusive)

```{r}
filter(flights, dep_time >= 0000 & dep_time <= 0600)
```

1.2. Another useful dplyr filtering helper is between(). What does it do? Can you use it to simplify the code needed to answer the previous challenges? (hint: use last example)

```{r}
#between() is used to check if a specific value falls within range of two values that you can specify.
filter(flights, between(dep_time, 0000, 0600))
```

1.3. How many flights have a missing dep_time? What other variables are missing? What might these rows represent?

```{r}
filter(flights, is.na(dep_time))
#8,255 flights are missing a dep. time
```

## Arrange

1.4. How could you use arrange() to sort all missing values to the start? (Hint: use is.na()).

```{r}
arrange(flights, desc(is.na(dep_time)))
```

2.  Sort flights to find the most delayed flights. Find the flights that left earliest in the morning.
3.  Sort flights to find the fastest (highest speed) flights.
4.  Was there a flight on every day of 2013?

<!-- -->

5.  Which flights traveled the farthest? Which traveled the shortest?

# 3.3.5 Exercises

1.  Compare `dep_time`, `sched_dep_time`, and `dep_delay`. How would you expect those three numbers to be related?

2.  Currently `dep_time` and `sched_dep_time` are convenient to look at, but hard to compute with because they’re not really continuous numbers. Convert them to a more convenient representation of number of minutes since midnight, called `dep_minute` as a new column.

    (Hint: you can pull out digits using the `%%` remainder operator and the `%/%` integer division operator. Take a time, like `515`, and integer divide by 100. Then take the remainder. Do you see how these can be used to construct the minutes since midnight?)

3.  Now, redo the first problem using the calculations you worked out in #2. Does this way work better?
